syntax = "proto3";
package racing;

option go_package = "/racing";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

service Racing {
  // ListRaces will return a collection of all races.
  rpc ListRaces(ListRacesRequest) returns (ListRacesResponse) {}

  // Get Race by ID
  rpc GetRace(GetRaceRequest) returns (GetRaceResponse) {}
}

/* Requests/Responses */

message ListRacesRequest {
  ListRacesRequestFilter filter = 1;
  repeated SortOptions sortoptions = 2;
}

// Response to ListRaces call.
message ListRacesResponse {
  repeated Race races = 1;
}

// Request for Single Race by ID
message GetRaceRequest {
  google.protobuf.Int64Value race_id = 1;
}

// Response for Single Race by ID
message GetRaceResponse {
  Race race = 1;
}

// Filter for listing races.
message ListRacesRequestFilter {
  repeated int64 meeting_ids = 1;
  google.protobuf.BoolValue visible = 2;
}

// Sort Order for SQL fields
enum SortOrder {
  SORT_UNSPECIFIED = 0;
  SORT_ASC = 1;
  SORT_DESC = 2;
}

message SortOptions {
  string field = 1;
  SortOrder sortorder = 2;
}

enum Status {
  STATUS_UNKNOWN = 0;
  OPEN = 1;
  CLOSED = 2;
}
/* Resources */

// A race resource.
message Race {
  // ID represents a unique identifier for the race.
  int64 id = 1;
  // MeetingID represents a unique identifier for the races meeting.
  int64 meeting_id = 2;
  // Name is the official name given to the race.
  string name = 3;
  // Number represents the number of the race.
  int64 number = 4;
  // Visible represents whether or not the race is visible.
  bool visible = 5;
  // AdvertisedStartTime is the time the race is advertised to run.
  google.protobuf.Timestamp advertised_start_time = 6;
  // Status of the Race - Whether Closed or Open
  Status status = 7;
}

